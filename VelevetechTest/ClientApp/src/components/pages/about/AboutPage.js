import React from 'react';

const AboutPage = () => {
    return (
        <div>
            Разработать веб-приложение для управления студентами.<br/>
            <br />
            Приложение должно отвечать минимальным бизнес требованиям:<br />
            1. Возможность создать/отредактировать/удалить студента<br />
            2. Возможность просмотреть всех студентов с фильтрацией.<br />
            3. Возможность увидеть сколько всего заведено студентов<br />
            4. Дополнительно, но не обязательно: в списке студентов добавить сортировку по убыванию или возрастанию полей (ФИО, Идентификатор и Пол)<br />
            5. Дополнительно, но не обязательно: авторизация и у каждого пользователя свой список студентов.<br />
            <br />
            Поля студента:<br />
            • ID (required, PK). Можно использовать любой вариант. Это может быть как GUID, так и обычный int/long + increment. Это поле системное, изменение данного поля не допускается. Отображать в UI не обязательно.<br />
            • Пол (required)<br />
            • Фамилия (required, максимальная длина 40 символов)<br />
            • Имя (required, максимальная длина 40 символов)<br />
            • Отчество (not required, максимальная длина 60 символов)<br />
            • Уникальный идентификатор студента (not required, должен быть уникальным в рамках всех студентов, минимальная длина 6 символов, максимальная длина 16). Опциональный, например мы хотим задать для студента позывной, но не хотим чтобы два студента были с одинаковыми позывными.<br />
            <br />
            Интерфейс должен включать следующие экраны:<br />
            • Список студентов<br />
            • Должен содержать всех студентов (список)<br />
            • Должен иметь фильтры<br />
            • Предоставляет возможность “Добавить студента”, “Редактировать студента”, “Удалить студента”.<br />
            • Редактирование студента должно открываться при нажатии на ФИО.<br />
            Создание/редактирование студента<br />
            • предусмотреть клиентскую валидацию по условиям.<br />
            <br />
            Backend:<br />
            • Dotnet Core 2.0 или выше<br />
            • Entity framework core (БД: на ваш выбор, например SqlLite)<br />
            <br />
            Frontend:<br />
            • Интерфейс должен быть написан на любом популярном фреймворке (библиотеке) - React/VueJs/Angular 4+<br />
            • Для вёрстки можете использовать Bootstrap или любую технологию на ваш вкус<br />
            Прочие требования:<br />
            • Предоставьте минимальные требования для компиляции и запуска приложения<br />
            • Архив с исходным кодом не должен включать себя NuGet пакеты, папку node_modules, собранные бинарники (т.е. без папок BIN и OBJ), и т.п.<br />
            • Укажите, приблизительно сколько времени заняло выполнение тестового задания (отдельно Backend и Frontend)<br />
        </div>
    );
};

export default AboutPage;